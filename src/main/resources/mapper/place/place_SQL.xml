<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 23.01.17 나슬기: 시설 관련 쿼리문 파일 생성 -->
<mapper namespace="place">
	<!-- 23.01.30 나슬기: 시설 조회하는 쿼리문. 시설명/주소/메뉴명 중 일치하는 값으로 모두 검색. 등록순/이름/리뷰/평점 순으로 정렬. -->
	<select id="se_pl_list" resultType="hashmap">
		<include refid="common.pagingPre"/>
		<![CDATA[
		--가져와야 하는 데이터 목록
		select rownum rnum,--행번호
			pl_idx, pl_name, pl_loc, pl_del_gb,--시설 번호, 시설명, 시설 주소, 삭제요청여부
			pc_idx, pc_name,--시설 카테고리 번호, 카테고리 명
			r_avg, r_count,--리뷰 평균, 리뷰 개수
			pm_name, pm_count,--메뉴명, 시설별 총 메뉴 개수
			ph_name--이미지명
		from
			--시설정보
			place
			--카테고리 정보
			inner join (select pc_idx, pc_name
					from place_cate
					--카테고리를 넘겨받았다면
					]]><if test="pl_pc_idx != null and pl_pc_idx != 'caAll'">
					where pc_idx = ${pl_pc_idx}
					</if><![CDATA[
				) on pc_idx = pl_pc_idx
			--리뷰 정보. 시설별 평균(소숫점 한자리수로 반올림), 총 개수
		    left join (select re_pl_idx, round(avg(re_star), 1) r_avg, count(re_pl_idx) r_count
		            from review where re_del_gb = 'N' group by re_pl_idx
		        ) on pl_idx = re_pl_idx
		    --메뉴 정보. 메뉴명, 총 메뉴 개수
		    left join (select pm_pl_idx, min(pm_name) pm_name, pm_count--시설 번호, 메뉴명, 메뉴 개수를
		    		from (select pm_pl_idx pmplidx, count(pm_name) pm_count--시설번호와 메뉴 개수를 가져와서
						from place_menu group by pm_pl_idx--시설번호 기준으로 그룹핑 한 후
					) inner join place_menu on pmplidx = pm_pl_idx--시설번호 기준으로 조인
					group by pm_pl_idx, pm_count--다시 그룹핑
		    	) on pl_idx = pm_pl_idx--시설번호 기준으로 조인
		    --이미지 정보. 저장된 이미지명
		    left join (select ph_board_idx, min(ph_stored_file_name) ph_name
		    		from photo
		    		where ph_board_type = 'place' and ph_del_gb = 'N'
		    		group by ph_board_idx
		    	) on pl_idx = ph_board_idx
		]]>
		<where>
			<if test="subKeyword != null">
			<![CDATA[
				--검색어를 넘겨받았다면, 시설명/주소/메뉴명 중 일치하는 값으로 모두 검색
				pl_name like '%'||#{subKeyword}||'%'--시설명
				or pl_loc like '%'||#{subKeyword}||'%'--주소
				or pm_name like '%'||#{subKeyword}||'%'--메뉴명
			]]>
			</if>
		</where>
		order by
			<choose>
				<when test="order == 'name'.toString()">pl_name asc<![CDATA[--이름 내림차순 정렬 ㄱ~ㅎ]]></when>
				<when test="order == 'reviewcnt'.toString()">r_count desc, r_avg desc<![CDATA[--리뷰가 많은 순으로 정렬 후 같은 값에 한해 평점 높은 순으로 재정렬]]></when>
				<when test="order == 'reviewavg'.toString()">r_avg desc, r_count desc<![CDATA[--평점 높은 순으로 정렬 후 같은 값에 한해 리뷰가 많은 순으로 재정렬]]></when>
				<otherwise>pl_idx desc<![CDATA[--등록 순으로 오름차순 정렬. 최신글~오래된글]]></otherwise>
			</choose>
		<include refid="common.pagingPost"/>
	</select>
	<!-- 23.01.17 나슬기: 시설 상세 조회하는 쿼리문 / 받는값: 시설 번호 -->
	<select id="se_pl" resultType="hashmap">
		<![CDATA[
		select pl_idx, pl_pc_idx, pl_name, pl_call, pl_loc, pl_offday, pl_open, pl_close, pl_mod_date, pl_del_gb,--시설관련 정보
			pc_name--카테고리 명
		from place
			inner join (select pc_idx, pc_name from place_cate) on pc_idx = pl_pc_idx
		where pl_idx = ${pl_idx}
		]]>
	</select>
	
	<!-- 23.01.17 나슬기: 시설 등록하는 쿼리문 / 받는값: 등록할 시설 번호와 수정날짜, 삭제 여부를 제외한 모든 값
		23.01.22 나슬기: 받는값 동적 처리 및 selectKey 추가 -->
	<insert id="in_pl">
		<selectKey keyProperty="PL_IDX_NEXT" order="BEFORE" resultType="int">
			select seq_place.nextval from dual
		</selectKey>
		insert into place(pl_idx
		<foreach item="val" index="key" collection="map">
			<trim prefix=",">
				<if test="val != null and !val.equals('')">${key}</if>
			</trim>
		</foreach>
		) values (${PL_IDX_NEXT}
		<foreach item="val" index="key" collection="map">
			<trim prefix=",">
				<if test="val != null and !val.equals('')">#{val}</if>
			</trim>
		</foreach>
		)
	</insert>

	<!-- 23.01.17 나슬기: 시설 수정하는 쿼리문 / 받는값: 시설명, 삭제 여부를 제외한 모든 값
		23.01.22 나슬기: 받는값 동적 처리 및 selectKey 추가 -->
	<update id="up_pl">
		update place
		set pl_mod_date = sysdate
		<foreach item="val" index="key" collection="map">
			<trim prefix=",">
				<if test="val != null and !val.equals('') and !key.equals('pl_idx')">${key} = #{val}</if>
			</trim>
		</foreach>
		where pl_idx = ${pl_idx}
	</update>

	<!-- 23.01.16 나슬기: 시설 삭제 요청하는 쿼리문 / 받는값: 요청 상태, 시설 번호 -->
	<update id="de_req_pl">
		update place set pl_del_gb = #{pl_del_gb} where pl_idx = ${pl_idx}
	</update>
	<!-- 23.01.16 나슬기: 시설 삭제하는 쿼리문 / 받는값: 시설 번호 -->
	<delete id="de_pl">
		delete place where pl_idx = ${pl_idx}
	</delete>
</mapper>